import { state, output, reviewList, reviewModalOverlay, aiHistoryLog } from './config.js';
import { showLoading, showMessage } from './ui.js';
import { saveState } from './history.js';

// --- Gemini API Functions ---
async function callGeminiAPI(prompt, jsonSchema = null) {
    if (!state.geminiApiKey) {
        showMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini API Key ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö");
        return null;
    }
    showLoading(true);
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${state.geminiApiKey}`;
    const payload = { contents: [{ parts: [{ text: prompt }] }] };
    if (jsonSchema) {
        payload.generationConfig = { responseMimeType: "application/json", responseSchema: jsonSchema };
    }
    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error.message || `HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        if (data.candidates && data.candidates[0].content.parts[0].text) {
            return data.candidates[0].content.parts[0].text;
        } else {
            return "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
        }
    } catch (error) {
        console.error("Gemini API Error:", error);
        showMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API: " + error.message);
        return null;
    } finally {
        showLoading(false);
    }
}

export function addAiResponseToHistory(promptUsed, aiResponse) {
    const noHistoryMsg = aiHistoryLog.querySelector('p');
    if (noHistoryMsg && noHistoryMsg.textContent.includes('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥')) {
        aiHistoryLog.innerHTML = '';
    }

    const responseEntry = document.createElement('div');
    responseEntry.className = 'ai-history-entry card';
    responseEntry.innerHTML = `
        <div style="font-size: 0.85rem; color: var(--text-secondary); margin-bottom: 0.5rem;">
            <strong>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏±‡πà‡∏á AI:</strong> "${promptUsed}"
            <span style="float: right;">${new Date().toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })}</span>
        </div>
        <div class="ai-response-content">${aiResponse}</div>
        <button class="btn gemini-btn copy-ai-response-btn" style="padding: 8px 12px; font-size: 0.85rem;">üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å</button>
    `;
    aiHistoryLog.prepend(responseEntry);
    aiHistoryLog.scrollTop = 0;

    responseEntry.querySelector('.copy-ai-response-btn').onclick = () => {
        output.value = aiResponse;
        output.dispatchEvent(new Event('input'));
        saveState();
        showMessage("‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° AI ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!");
    };
}

// --- AI Tools ---
export async function proofreadWithAI() {
    const text = output.value;
    if (!text.trim()) return showMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ AI ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡∏Ñ‡∏£‡∏±‡∏ö");
    const schema = { type: "ARRAY", items: { type: "OBJECT", properties: { original: { type: "STRING" }, corrected: { type: "STRING" }, reason: { type: "STRING" } }, required: ["original", "corrected", "reason"] } };
    const prompt = `‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ì‡∏≤‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏Å‡∏î‡∏ú‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ key: "original", "corrected", ‡πÅ‡∏•‡∏∞ "reason" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏î‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå JSON\n\n---\n${text}\n---`;
    const resultJson = await callGeminiAPI(prompt, schema);
    if (resultJson) {
        try {
            const suggestions = JSON.parse(resultJson);
            if (suggestions.length === 0) {
                showMessage("‚ú® ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! AI ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡πÉ‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö");
                return;
            }
            displayReviewModal(suggestions);
        } catch (e) {
            showMessage("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI ‡πÑ‡∏î‡πâ:\n" + resultJson);
        }
    }
}

function displayReviewModal(suggestions) {
    reviewList.innerHTML = '';
    suggestions.forEach((s, index) => {
        const item = document.createElement('li');
        item.className = 'review-item';
        item.dataset.index = index;
        item.dataset.original = s.original;
        item.dataset.corrected = s.corrected;
        item.dataset.status = 'accepted';
        item.innerHTML = `<div class="review-text"><span class="original">${s.original}</span> ‚Üí <span class="corrected">${s.corrected}</span><div style="font-size: 0.8em; color: var(--text-secondary);">${s.reason}</div></div><div class="review-actions"><button class="action-btn accept" title="‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö">‚úÖ</button><button class="action-btn reject" title="‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò">‚ùå</button></div>`;
        reviewList.appendChild(item);
    });
    reviewModalOverlay.style.display = 'flex';
}

export function applyAiChanges() {
    let text = output.value;
    const items = reviewList.querySelectorAll('.review-item');
    items.forEach(item => {
        if (item.dataset.status === 'accepted') {
            text = text.replaceAll(item.dataset.original, item.dataset.corrected);
        }
    });
    output.value = text;
    output.dispatchEvent(new Event('input'));
    saveState();
    reviewModalOverlay.style.display = 'none';
    showMessage("‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!");
}

export async function rephraseWithAI() {
    const selectedText = output.value.substring(output.selectionStart, output.selectionEnd);
    if (!selectedText.trim()) return showMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≤‡∏Å‡∏Ñ‡∏•‡∏∏‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ AI ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö");
    const prompt = `‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ô‡πà‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏á‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ:\n\n"${selectedText}"`;
    const result = await callGeminiAPI(prompt);
    if (result) {
        addAiResponseToHistory(`‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°: "${selectedText}"`, result);
    }
}

export async function generateTitleWithAI() {
    const text = output.value;
    if (!text.trim()) return showMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö");
    const prompt = `‡∏à‡∏≤‡∏Å‡∏ö‡∏ó‡∏™‡∏õ‡∏≠‡∏¢‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏¥‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡∏ú‡∏π‡πâ‡∏ä‡∏°‡∏°‡∏≤ 5 ‡∏ä‡∏∑‡πà‡∏≠ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà" ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢:\n\n---\n${text}\n---`;
    const result = await callGeminiAPI(prompt);
    if (result) {
        const formattedResult = `--- üé¨ ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ---\n${result}\n---------------------------\n\n`;
        addAiResponseToHistory("‡∏Ñ‡∏¥‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ô", formattedResult);
    }
}

export async function sendCustomPromptToAI(customPromptInput) {
    const customPromptText = customPromptInput.value.trim();
    const mainContentText = output.value.trim();

    if (!customPromptText) {
        return showMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö");
    }
    if (!mainContentText) {
        return showMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•");
    }

    const fullPrompt = `${customPromptText}\n\n--- ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ---\n${mainContentText}\n---`;
    const result = await callGeminiAPI(fullPrompt);
    if (result) {
        addAiResponseToHistory(customPromptText, result);
        customPromptInput.value = '';
    }
}
